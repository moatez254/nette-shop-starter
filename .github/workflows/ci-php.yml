name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

jobs:
  test:
    name: PHP ${{ matrix.php-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
        php-version: ['8.2', '8.3']
        dependency-version: [prefer-stable]
        include:
          - php-version: '8.3'
            os: ubuntu-latest
            dependency-version: prefer-stable

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: composer:v2
          coverage: xdebug
          extensions: sqlite3, pdo_sqlite, mbstring, xml, curl, intl
          ini-values: |
            memory_limit=-1
            max_execution_time=300
            date.timezone=UTC
            error_reporting=E_ALL
            display_errors=On
            log_errors=On

      - name: Validate composer.json and composer.lock
        run: composer validate --strict --no-check-all

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-composer-

      - name: Install dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --${{ matrix.dependency-version }} --no-interaction --no-progress --prefer-dist

      - name: Create necessary directories
        run: |
          mkdir -p var/log
          mkdir -p var/temp
          mkdir -p coverage

      - name: Run PHP CodeSniffer (PSR-12)
        run: composer lint

      - name: Run PHPStan (Static Analysis)
        run: composer stan

      - name: Run PHPUnit tests with coverage
        run: composer test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage reports to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.php-version }}-${{ matrix.os }}
          path: coverage/
          retention-days: 30

      - name: Run smoke test
        run: |
          php -S localhost:8000 -t www &
          sleep 5
          curl -f http://localhost:8000/api/health || exit 1

  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:v2

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      - name: Run security audit
        run: composer audit --format=json --output=security-audit.json || true

      - name: Upload security audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: security-audit.json
          retention-days: 30

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:v2

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      - name: Check code formatting
        run: composer lint --dry-run

      - name: Run PHPStan with max level
        run: composer stan

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t nette-shop-starter:test .

      - name: Test Docker container
        run: |
          docker run -d --name test-container -p 8000:8000 nette-shop-starter:test
          sleep 10
          curl -f http://localhost:8000/api/health || exit 1
          docker stop test-container
          docker rm test-container

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, quality, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment logic here
          echo "Deployment completed successfully!"
